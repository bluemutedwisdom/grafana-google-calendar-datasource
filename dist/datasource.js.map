{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","dateMath","scriptjs","GoogleCalendarDatasource","instanceSettings","$q","templateSrv","timeSrv","backendSrv","type","name","id","access","jsonData","clientId","scopes","discoveryDocs","q","initialized","deferred","defer","gapi","load","resolve","promise","initialize","then","status","message","title","catch","console","log","err","Promise","auth2","getAuthInstance","currentUser","get","client","init","scope","authInstance","isSignedIn","signIn","user","query","timeRange","eventsQuery","match","calendarId","fieldPath","filter","params","from","toISOString","to","getEvents","when","events","map","text","event","startEndQuery","key","format","offset","parseInt","sort","a","b","start","dateTime","date","lastIndex","index","length","Math","floor","duration","diff","asSeconds","rangeQuery","end","range","dateMathQuery","expression","parse","reject","Error","options","annotation","isEmpty","result","chain","regionId","time","valueOf","summary","tags","organizer","displayName","description","flatten","value","calendar","list","datasourceRequest","url","method","data","queries","extend","queryType","api","refId","datasourceId","response","items","results","meta","body","JSON","stringify","error"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport * as dateMath from 'app/core/utils/datemath';\nimport scriptjs from './libs/script.js';\n\nexport class GoogleCalendarDatasource {\n\n  constructor(instanceSettings, $q, templateSrv, timeSrv, backendSrv) {\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.access = instanceSettings.jsonData.access || 'direct';\n    this.clientId = instanceSettings.jsonData.clientId;\n    this.scopes = 'https://www.googleapis.com/auth/calendar.readonly';\n    this.discoveryDocs = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    this.q = $q;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n    this.backendSrv = backendSrv;\n    this.initialized = false;\n  }\n\n  load() {\n    let deferred = this.q.defer();\n    scriptjs('https://apis.google.com/js/api.js', () => {\n      gapi.load('client:auth2', () => {\n        return deferred.resolve();\n      });\n    });\n    return deferred.promise;\n  }\n\n  testDatasource() {\n    return this.initialize().then(() => {\n      return { status: 'success', message: 'Data source is working', title: 'Success' };\n    }).catch(err => {\n      console.log(err);\n      return { status: \"error\", message: err.message, title: \"Error\" };\n    });\n  }\n\n  initialize() {\n    if (this.access == 'proxy') {\n      return Promise.resolve([]);\n    }\n    if (this.initialized) {\n      return Promise.resolve(gapi.auth2.getAuthInstance().currentUser.get());\n    }\n\n    return this.load().then(() => {\n      return gapi.client.init({\n        clientId: this.clientId,\n        scope: this.scopes,\n        discoveryDocs: this.discoveryDocs\n      }).then(() => {\n        let authInstance = gapi.auth2.getAuthInstance();\n        if (!authInstance) {\n          throw { message: 'failed to initialize' };\n        }\n        let isSignedIn = authInstance.isSignedIn.get();\n        if (isSignedIn) {\n          this.initialized = true;\n          return authInstance.currentUser.get();\n        }\n        return authInstance.signIn().then(user => {\n          this.initialized = true;\n          return user;\n        });\n      }, err => {\n        console.log(err);\n        throw { message: 'failed to initialize' };\n      });\n    });\n  }\n\n  metricFindQuery(query) {\n    return this.initialize().then(() => {\n      let timeRange = this.timeSrv.timeRange();\n      let eventsQuery = query.match(/^events\\((([^,]+), *)?([^,]+), *([^,]+)\\)/);\n      if (eventsQuery) {\n        let calendarId = eventsQuery[2];\n        let fieldPath = eventsQuery[3];\n        let filter = eventsQuery[4];\n        let params = {\n          'calendarId': calendarId,\n          'timeMin': timeRange.from.toISOString(),\n          'timeMax': timeRange.to.toISOString(),\n          'orderBy': 'startTime',\n          'q': filter,\n          'showDeleted': false,\n          'singleEvents': true,\n          'maxResults': 250,\n        };\n        return this.getEvents(params).then(events => {\n          return this.q.when(events.map(event => {\n            return { text: _.get(event, fieldPath) };\n          }));\n        });\n      }\n\n      let startEndQuery = query.match(/^(start|end)\\((([^,]+), *)?([^,]+), *([^,]+), *([^,]+)\\)/);\n      if (startEndQuery) {\n        let key = startEndQuery[1] === 'start' ? 'start' : 'end';\n        let calendarId = startEndQuery[3];\n        let format = startEndQuery[4];\n        let offset = parseInt(startEndQuery[5], 10);\n        let filter = startEndQuery[6];\n        let params = {\n          'calendarId': calendarId,\n          'timeMin': timeRange.from.toISOString(),\n          'timeMax': timeRange.to.toISOString(),\n          'orderBy': 'startTime',\n          'q': filter,\n          'showDeleted': false,\n          'singleEvents': true,\n          'maxResults': 250,\n        };\n        return this.getEvents(params).then(events => {\n          events.sort((a, b) => {\n            return moment(a.start.dateTime || a.start.date) > moment(b.start.dateTime || b.start.date);\n          });\n          let lastIndex = 0;\n          let index = lastIndex - offset;\n          if (index < 0 || index >= events.length) {\n            return {};\n          }\n          let date = moment(events[index][key].dateTime || events[index][key].date);\n          if (format === 'offset' || format === '-offset') {\n            date = Math.floor(moment.duration(timeRange.to.diff(date)).asSeconds());\n            if (format === 'offset') {\n              date = -date;\n            }\n            date = date + 's';\n          } else {\n            date = date.format(format);\n          }\n          return [{ text: date }];\n        });\n      }\n\n      let rangeQuery = query.match(/^range\\((([^,]+), *)?([^,]+), *([^,]+), *([^,]+)\\)/);\n      if (rangeQuery) {\n        let calendarId = rangeQuery[2];\n        let format = rangeQuery[3];\n        let offset = parseInt(rangeQuery[4], 10);\n        let filter = rangeQuery[5];\n        let params = {\n          'calendarId': calendarId,\n          'timeMin': timeRange.from.toISOString(),\n          'timeMax': timeRange.to.toISOString(),\n          'orderBy': 'startTime',\n          'q': filter,\n          'showDeleted': false,\n          'singleEvents': true,\n          'maxResults': 250,\n        };\n        return this.getEvents(params).then(events => {\n          events.sort((a, b) => {\n            return moment(a.start.dateTime || a.start.date) > moment(b.start.dateTime || b.start.date);\n          });\n          let lastIndex = 0;\n          let index = lastIndex - offset;\n          if (index < 0 || index >= events.length) {\n            return {};\n          }\n          let end = moment(events[index].end.dateTime || events[index].end.date);\n          let start = moment(events[index].start.dateTime || events[index].start.date);\n          let range = '';\n          if (format === 'offset' || format === '-offset') {\n            range = Math.floor(moment.duration(end.diff(start)).asSeconds());\n            if (format === 'offset') {\n              range = -range;\n            }\n            range = range + 's';\n          }\n          return [{ text: range }];\n        });\n      }\n\n      let dateMathQuery = query.match(/^datemath\\(([^,]+), *([^,]+)\\)/);\n      if (dateMathQuery) {\n        let expression = dateMathQuery[1];\n        let format = dateMathQuery[2];\n        let date = dateMath.parse(expression, false);\n        if (format === 'offset' || format === '-offset') {\n          date = Math.floor(moment.duration(timeRange.to.diff(date)).asSeconds());\n          if (format === 'offset') {\n            date = -date;\n          }\n          date = date + 's';\n        } else {\n          date = date.format(format);\n        }\n        return [{ text: date }];\n      }\n\n      return Promise.reject(new Error('Invalid query'));\n    });\n  }\n\n  annotationQuery(options) {\n    var annotation = options.annotation;\n    var calendarId = annotation.calendarId;\n\n    if (_.isEmpty(calendarId)) {\n      return this.q.when([]);\n    }\n\n    return this.initialize().then(() => {\n      return (() => {\n        let params = {\n          'calendarId': calendarId,\n          'timeMin': options.range.from.toISOString(),\n          'timeMax': options.range.to.toISOString(),\n          'orderBy': 'startTime',\n          'showDeleted': false,\n          'singleEvents': true,\n          'maxResults': 250\n        };\n        return this.getEvents(params);\n      })().then((events) => {\n        var result = _.chain(events)\n          .map((event) => {\n            var start = moment(event.start.dateTime || event.start.date);\n            var end = moment(event.end.dateTime || event.end.date);\n\n            return [\n              {\n                regionId: event.id,\n                annotation: annotation,\n                time: start.valueOf(),\n                title: event.summary,\n                tags: ['Google Calender', event.organizer.displayName],\n                text: event.description ? event.description : \"\",\n              },\n              {\n                regionId: event.id,\n                annotation: annotation,\n                time: end.valueOf(),\n                title: event.summary,\n                tags: ['Google Calendar', event.organizer.displayName],\n                text: event.description ? event.description : \"\",\n              }\n            ];\n          }).flatten().value();\n\n        return result;\n      });\n    });\n  }\n\n  getEvents(params) {\n    return (() => {\n      if (this.access != 'proxy') {\n        return gapi.client.calendar.events.list(params);\n      } else {\n        return this.backendSrv.datasourceRequest({\n          url: '/api/tsdb/query',\n          method: 'POST',\n          data: {\n            queries: [\n              _.extend({\n                queryType: 'raw',\n                api: 'calendar.events.list',\n                refId: '',\n                datasourceId: this.id\n              }, params)\n            ]\n          }\n        });\n      }\n    })().then(response => {\n      return this.access != 'proxy' ? response.result.items : response.data.results[''].meta.items;\n    }).catch(err => {\n      if (this.access != 'proxy') {\n        throw err;\n      } else {\n        throw {\n          body: JSON.stringify({\n            error: {\n              message: err.data.results[\"\"].error\n            }\n          })\n        };\n      }\n    });\n  }\n}\n"]}