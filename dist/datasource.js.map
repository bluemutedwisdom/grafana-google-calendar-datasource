{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","scriptjs","GoogleCalendarDatasource","instanceSettings","$q","templateSrv","backendSrv","type","name","id","access","jsonData","clientId","scopes","discoveryDocs","q","initialized","deferred","defer","gapi","load","resolve","promise","initialize","then","status","message","title","catch","console","log","err","Promise","auth2","getAuthInstance","currentUser","get","client","init","scope","authInstance","isSignedIn","signIn","user","options","annotation","calendarId","isEmpty","when","params","range","from","toISOString","to","calendar","events","list","datasourceRequest","url","method","data","queries","extend","queryType","api","refId","datasourceId","response","result","items","results","meta","chain","map","event","start","dateTime","date","end","regionId","time","valueOf","summary","tags","organizer","displayName","text","description","flatten","value"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport scriptjs from './libs/script.js';\n\nexport class GoogleCalendarDatasource {\n\n  constructor(instanceSettings, $q, templateSrv, backendSrv) {\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.access = instanceSettings.jsonData.access;\n    this.clientId = instanceSettings.jsonData.clientId;\n    this.scopes = 'https://www.googleapis.com/auth/calendar.readonly';\n    this.discoveryDocs = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    this.q = $q;\n    this.templateSrv = templateSrv;\n    this.backendSrv = backendSrv;\n    this.initialized = false;\n  }\n\n  load() {\n    let deferred = this.q.defer();\n    scriptjs('https://apis.google.com/js/api.js', () => {\n      gapi.load('client:auth2', () => {\n        return deferred.resolve();\n      });\n    });\n    return deferred.promise;\n  }\n\n  testDatasource() {\n    return this.initialize().then(() => {\n      return { status: 'success', message: 'Data source is working', title: 'Success' };\n    }).catch(err => {\n      console.log(err);\n      return { status: \"error\", message: err.message, title: \"Error\" };\n    });\n  }\n\n  initialize() {\n    if (this.access == 'proxy') {\n      return Promise.resolve([]);\n    }\n    if (this.initialized) {\n      return Promise.resolve(gapi.auth2.getAuthInstance().currentUser.get());\n    }\n\n    return this.load().then(() => {\n      return gapi.client.init({\n        clientId: this.clientId,\n        scope: this.scopes,\n        discoveryDocs: this.discoveryDocs\n      }).then(() => {\n        let authInstance = gapi.auth2.getAuthInstance();\n        if (!authInstance) {\n          throw { message: 'failed to initialize' };\n        }\n        let isSignedIn = authInstance.isSignedIn.get();\n        if (isSignedIn) {\n          this.initialized = true;\n          return authInstance.currentUser.get();\n        }\n        return authInstance.signIn().then(user => {\n          this.initialized = true;\n          return user;\n        });\n      }, err => {\n        console.log(err);\n        throw { message: 'failed to initialize' };\n      });\n    });\n  }\n\n  annotationQuery(options) {\n    var annotation = options.annotation;\n    var calendarId = annotation.calendarId;\n\n    if (_.isEmpty(calendarId)) {\n      return this.q.when([]);\n    }\n\n    return this.initialize().then(() => {\n      return (() => {\n        let params = {\n          'calendarId': calendarId,\n          'timeMin': options.range.from.toISOString(),\n          'timeMax': options.range.to.toISOString(),\n          'showDeleted': false,\n          'singleEvents': true,\n          'maxResults': 250,\n          'orderBy': 'startTime'\n        };\n        if (this.access != 'proxy') {\n          return gapi.client.calendar.events.list(params);\n        } else {\n          return this.backendSrv.datasourceRequest({\n            url: '/api/tsdb/query',\n            method: 'POST',\n            data: {\n              queries: [\n                _.extend({\n                  queryType: 'raw',\n                  api: 'calendar.events.list',\n                  refId: '',\n                  datasourceId: this.id\n                }, params)\n              ]\n            }\n          });\n        }\n      })().then((response) => {\n        var events = this.access != 'proxy' ? response.result.items : response.data.results[''].meta.items;\n\n        var result = _.chain(events)\n          .map((event) => {\n            var start = moment(event.start.dateTime || event.start.date);\n            var end = moment(event.end.dateTime || event.end.date);\n\n            return [\n              {\n                regionId: event.id,\n                annotation: annotation,\n                time: start.valueOf(),\n                title: event.summary,\n                tags: ['Google Calender', event.organizer.displayName],\n                text: event.description ? event.description : \"\",\n              },\n              {\n                regionId: event.id,\n                annotation: annotation,\n                time: end.valueOf(),\n                title: event.summary,\n                tags: ['Google Calendar', event.organizer.displayName],\n                text: event.description ? event.description : \"\",\n              }\n            ];\n          }).flatten().value();\n\n        return result;\n      });\n    });\n  }\n}\n"]}